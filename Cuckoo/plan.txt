
CTORS:
> Are special cases, in that delegation to base ctor must occur in outer!

Need OnBeforeCall to provide opportunity to change args before ctor interior stuff.


1 - Init cascade: constructs hierarchy of calls, each with its target in place
2 - OnBeforeCall cascade
3 - Ctor init at base
4 - OnCall cascade
5 - Return
...

OnCall and OnBeforeCall will become virtual rather than abstract

OnBeforeCall should cascade down through cuckoos...












********************************************************************
TO DO:

> Change to single array of CallArgs, passed throughout stack - no lazy-loading, unfortunately
	- would be best if CallArgs were structs, no - they store very little info (value + ref to ParamInfo)
> Cuckoos on Constructors
> interface + abstract methods
> structs rather than classes
> async
> Calls to have bespoke little method/param info classes, with lazy GetParameterInfo() and GetMethodInfo() funcs
> Use abstract CallBase class, with only sub-methods emitted
> Test Cuckoos declared in other assemblies
> Beware array types: in both ctor args and gen params!
> Return value to police its type
> CallInner and Proceed to check call phase



*******************************************************************
DOUBTFUL:

> Light-weight SyncLock on lazy args creation
	- args are only created once per call, but cuckoo may thread off and access args from there...



*******************************************************************
DONE:
> Static classes DONE
> Static methods DONE
> Optional args in CuckooAttributes DONE
> Optional args in cuckooed methods DONE
> CallArg<T> classes, deriving from exposed ICallArg DONE
> CallArgs should check type of value set DONE
> ByRef parameters DONE
> Cooler lambda-based MethodTester DONE
> Generic classes DONE
> Multiple cuckoos in one nest DONE
> Init to be called DONE
> Change returned value DONE
> Args wrapped in classes DONE
> Name-provision encapsulated DONE
> Generic methods: generic args + generic return DONE
