


********************************************************************
TO DO:

> Optional args in cuckooed methods
> Optional args in CuckooAttributes
> Calls to have bespoke little method/param info classes, with lazy GetParameterInfo() and GetMethodInfo() funcs
> async
> Use abstract CallBase class, with only sub-methods emitted
> Light-weight SyncLock on lazy args creation
	- args are only created once per call, but cuckoo may thread off and access args from there...
> Test Cuckoos declared in other assemblies
> Static methods
> Static classes
> interface + abstract methods
> Beware array types: these too are just specs i reckon
> MethodTester.Mapper still a bit bitty: but good enough for now
> CallArgs to only accept new values post-cuckoo if ByRef



*******************************************************************
DONE:
> CallArg<T> classes, deriving from exposed ICallArg DONE
> CallArgs should check type of value set DONE
> ByRef parameters DONE
> Cooler lambda-based MethodTester DONE
> Generic classes DONE
> Multiple cuckoos in one nest DONE
> Init to be called DONE
> Change returned value DONE
> Args wrapped in classes DONE
> Name-provision encapsulated DONE
> Generic methods: generic args + generic return DONE
