
*******************************************************************
TO DO:
> Targeters should return specs with methodbases; tokens should be internal only
> TypeInitializationFailure with RoostTargeter

> Update NuGet
> Test package on Mono again
> Remember to switch nuget to Release!

*******************************************************************
DONE
> Rebuild nuget package after any changes DONE
> Propogate nuget package to example project DONE
> Att ctors with optional args DONE
> Att ctors with params arrays DONE
> Test ctor args and named params on att ctors - of all types! DONE
> Test args of type Type on atts DONE
> Separate gathering from weaving DONE
> Weaver should take AssemblyDefinition DONE
> Test picking up of private + public methods DONE
> Providers can't be abstract or generic DONE
> Ensure Cuckooeds are not virtual DONE
> Separate Cuckoo.Weave and Cuckoo.Weave DONE
> General roost-targeting mechanism DONE
> Rewrite attributes to use roost-targeting DONE
> NuGet DONE
> Mono tesing DONE
> CallArgs of arrays and nullables DONE
> Fill in metadata DONE
> Now references Fody.Cecil DONE
> Hide stack as much as we can DONE
> Struct values are written back into place after cuckooing DONE
> Clean away MethodDecorator remnants DONE
> Remove and sort all usings DONE
> structs rather than classes DONE
> virtual methods DONE
> check attributes not inherited DONE
> Test Cuckoos declared in other assemblies DONE
> Extension methods DONE
> ICuckooProvider DONE
> Property accessors DONE
> Beware array types: in both ctor args and gen params! DONE
> Nullable types in generic args DONE
> async DONE
> Return value to police its type DONE
> Cuckoos on Constructors DONE
> Static roost field to be nested within Call class DONE
> Static classes DONE
> Static methods DONE
> Optional args in CuckooAttributes DONE
> Optional args in cuckooed methods DONE
> CallArg<T> classes, deriving from exposed ICallArg DONE
> CallArgs should check type of value set DONE
> ByRef parameters DONE
> Cooler lambda-based MethodTester DONE
> Generic classes DONE
> Multiple cuckoos in one nest DONE
> Init to be called DONE
> Change returned value DONE
> Args wrapped in classes DONE
> Name-provision encapsulated DONE
> Generic methods: generic args + generic return DONE
