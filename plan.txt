
ROOST TARGETING:

RoostTargeters specify MethodBases and ICuckooProvider types.

One of each needed CuckooProvider must be constructed at run time, on module load.

Each roost is then constructed with its specified CuckooProviders, which it queries to load its cuckoos.
- this is done already!

At the moment, providers are constructed by each call class's .cctor, which is provided with a list of atts decorating mOuter.

Instead the MethodWeaver is to be given an array of tokens (string fullnames of the provider type) 
which the Roost can then redeem at runtime, as part of its initiation.

OR this extra complication can be nicely side-stepped by simply providing ICuckooProvider TypeReferences, which, as now, the
Call must instantiate for itself, then pass to the Roost ctor.

YES! Sod the unnecessary fuss. Do as does now, but with input from targeters in general.

*****************

Problem of not being possible to instantiate embedded RoostTargeters at weave-time!

Each subject assembly is to be loaded up in its own AppDomain. A proxy assembly 









********************************************************************
TO DO:
> General roost-targeting mechanism
> Rewrite attributes to use roost-targeting
> Separate Cuckoo.Fody and Cuckoo.
> Test picking up of private + public methods

*******************************************************************
DONE
> NuGet DONE
> Mono tesing DONE
> CallArgs of arrays and nullables DONE
> Fill in metadata DONE
> Now references Fody.Cecil DONE
> Hide stack as much as we can DONE
> Struct values are written back into place after cuckooing DONE
> Clean away MethodDecorator remnants DONE
> Remove and sort all usings DONE
> structs rather than classes DONE
> virtual methods DONE
> check attributes not inherited DONE
> Test Cuckoos declared in other assemblies DONE
> Extension methods DONE
> ICuckooProvider DONE
> Property accessors DONE
> Beware array types: in both ctor args and gen params! DONE
> Nullable types in generic args DONE
> async DONE
> Return value to police its type DONE
> Cuckoos on Constructors DONE
> Static roost field to be nested within Call class DONE
> Static classes DONE
> Static methods DONE
> Optional args in CuckooAttributes DONE
> Optional args in cuckooed methods DONE
> CallArg<T> classes, deriving from exposed ICallArg DONE
> CallArgs should check type of value set DONE
> ByRef parameters DONE
> Cooler lambda-based MethodTester DONE
> Generic classes DONE
> Multiple cuckoos in one nest DONE
> Init to be called DONE
> Change returned value DONE
> Args wrapped in classes DONE
> Name-provision encapsulated DONE
> Generic methods: generic args + generic return DONE
